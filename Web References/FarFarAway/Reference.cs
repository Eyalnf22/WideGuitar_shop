//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EyalProject.FarFarAway {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSapakOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNameArrOperationCompleted;
        
        private System.Threading.SendOrPostCallback NameDontExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSapakOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInfoFromSapakOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService1() {
            this.Url = global::EyalProject.Properties.Settings.Default.EyalProject_FarFarAway_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSapakCompletedEventHandler GetSapakCompleted;
        
        /// <remarks/>
        public event GetNameArrCompletedEventHandler GetNameArrCompleted;
        
        /// <remarks/>
        public event NameDontExistCompletedEventHandler NameDontExistCompleted;
        
        /// <remarks/>
        public event InsertSapakCompletedEventHandler InsertSapakCompleted;
        
        /// <remarks/>
        public event getInfoFromSapakCompletedEventHandler getInfoFromSapakCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSapak", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSapak(string InstName, int amount) {
            object[] results = this.Invoke("GetSapak", new object[] {
                        InstName,
                        amount});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSapakAsync(string InstName, int amount) {
            this.GetSapakAsync(InstName, amount, null);
        }
        
        /// <remarks/>
        public void GetSapakAsync(string InstName, int amount, object userState) {
            if ((this.GetSapakOperationCompleted == null)) {
                this.GetSapakOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSapakOperationCompleted);
            }
            this.InvokeAsync("GetSapak", new object[] {
                        InstName,
                        amount}, this.GetSapakOperationCompleted, userState);
        }
        
        private void OnGetSapakOperationCompleted(object arg) {
            if ((this.GetSapakCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSapakCompleted(this, new GetSapakCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNameArr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetNameArr() {
            object[] results = this.Invoke("GetNameArr", new object[0]);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNameArrAsync() {
            this.GetNameArrAsync(null);
        }
        
        /// <remarks/>
        public void GetNameArrAsync(object userState) {
            if ((this.GetNameArrOperationCompleted == null)) {
                this.GetNameArrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNameArrOperationCompleted);
            }
            this.InvokeAsync("GetNameArr", new object[0], this.GetNameArrOperationCompleted, userState);
        }
        
        private void OnGetNameArrOperationCompleted(object arg) {
            if ((this.GetNameArrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNameArrCompleted(this, new GetNameArrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NameDontExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NameDontExist(string InstName) {
            object[] results = this.Invoke("NameDontExist", new object[] {
                        InstName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NameDontExistAsync(string InstName) {
            this.NameDontExistAsync(InstName, null);
        }
        
        /// <remarks/>
        public void NameDontExistAsync(string InstName, object userState) {
            if ((this.NameDontExistOperationCompleted == null)) {
                this.NameDontExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNameDontExistOperationCompleted);
            }
            this.InvokeAsync("NameDontExist", new object[] {
                        InstName}, this.NameDontExistOperationCompleted, userState);
        }
        
        private void OnNameDontExistOperationCompleted(object arg) {
            if ((this.NameDontExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NameDontExistCompleted(this, new NameDontExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertSapak", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertSapak(string InstName, int amount, string image, string instYear, string company, string type, string innertype) {
            this.Invoke("InsertSapak", new object[] {
                        InstName,
                        amount,
                        image,
                        instYear,
                        company,
                        type,
                        innertype});
        }
        
        /// <remarks/>
        public void InsertSapakAsync(string InstName, int amount, string image, string instYear, string company, string type, string innertype) {
            this.InsertSapakAsync(InstName, amount, image, instYear, company, type, innertype, null);
        }
        
        /// <remarks/>
        public void InsertSapakAsync(string InstName, int amount, string image, string instYear, string company, string type, string innertype, object userState) {
            if ((this.InsertSapakOperationCompleted == null)) {
                this.InsertSapakOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSapakOperationCompleted);
            }
            this.InvokeAsync("InsertSapak", new object[] {
                        InstName,
                        amount,
                        image,
                        instYear,
                        company,
                        type,
                        innertype}, this.InsertSapakOperationCompleted, userState);
        }
        
        private void OnInsertSapakOperationCompleted(object arg) {
            if ((this.InsertSapakCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSapakCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInfoFromSapak", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInfoFromSapak(string InstName, string wantedField) {
            object[] results = this.Invoke("getInfoFromSapak", new object[] {
                        InstName,
                        wantedField});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInfoFromSapakAsync(string InstName, string wantedField) {
            this.getInfoFromSapakAsync(InstName, wantedField, null);
        }
        
        /// <remarks/>
        public void getInfoFromSapakAsync(string InstName, string wantedField, object userState) {
            if ((this.getInfoFromSapakOperationCompleted == null)) {
                this.getInfoFromSapakOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInfoFromSapakOperationCompleted);
            }
            this.InvokeAsync("getInfoFromSapak", new object[] {
                        InstName,
                        wantedField}, this.getInfoFromSapakOperationCompleted, userState);
        }
        
        private void OngetInfoFromSapakOperationCompleted(object arg) {
            if ((this.getInfoFromSapakCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInfoFromSapakCompleted(this, new getInfoFromSapakCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSapakCompletedEventHandler(object sender, GetSapakCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSapakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSapakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetNameArrCompletedEventHandler(object sender, GetNameArrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNameArrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNameArrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NameDontExistCompletedEventHandler(object sender, NameDontExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NameDontExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NameDontExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertSapakCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getInfoFromSapakCompletedEventHandler(object sender, getInfoFromSapakCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInfoFromSapakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInfoFromSapakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591